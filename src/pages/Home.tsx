import qs from 'qs';
import React, { FC, useEffect, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import Categories from '../components/Categories';
import Pagination from '../components/Pagination/Pagination';
import PizzaBlock from '../components/PizzaBlock/PizzaBlock';
import PizzaSkeleton from '../components/PizzaBlock/PizzaSkeleton';
import Sort, { sortList } from '../components/Sort';
import {
  setCategoryId,
  setCurrentPage,
  setFilters,
} from '../redux/slices/filterSlice';
import { fetchPizzas } from '../redux/slices/pizzaSlice';

const Home: FC = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { items, status } = useSelector((state: any) => state.pizza);
  const { categoryId, sortType, currentPage, searchValue } = useSelector(
    (state: any) => state.filter
  );

  const isSearch = useRef(false);
  const isMounted = useRef(false);

  const onChangeCategory = React.useCallback((idx: number) => {
    dispatch(setCategoryId(idx));
  }, []);

  const onChangePage = (value: number) => {
    dispatch(setCurrentPage(value));
  };

  const getPizzas = async () => {
    // –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –≤–∏–¥–∞–ª–∏ '-' —è–∫—â–æ –≤—ñ–Ω –±—É–¥–µ
    const sortBy = sortType.sortProperty.replace('-', '');
    // –ø—Ä–æ–≤—ñ—Ä—è—î —á–∏ –≤ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—ñ —î '-' —ñ —Ä–æ–±–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —É–º–æ–≤–∏
    const order = sortType.sortProperty.includes('-') ? 'asc' : 'desc';
    const category = categoryId > 0 ? `category=${categoryId}` : '';
    const search = searchValue ? `&search=${searchValue}` : '';

    dispatch(
      // @ts-ignore
      fetchPizzas({
        sortBy,
        order,
        category,
        search,
        currentPage,
      })
    );
  };

  //TODO –Ø–∫—â–æ –∑–º—ñ–Ω–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ –±—É–≤ –ø–µ—Ä—à–∏–π —Ä–µ–Ω–¥–µ—Ä —Ç–æ –±—É–¥–µ —Ü—è –ø—Ä–æ–≤—ñ—Ä–∫–∞
  useEffect(() => {
    // —è–∫—à–æ isMounted –±—É–¥–µ true (–∫–æ–ª–∏ –≤–∂–µ –±—É–≤ –ø–µ—Ä—à–∏–π —Ä–µ–Ω–¥–µ—Ä), —Ç–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ —Ä–æ–±–∏ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å—ñ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if (isMounted.current) {
      // —Ç—É—Ç –∑'—î–¥–Ω—é—î–º
      const queryString = qs.stringify({
        sortProperty: sortType.sortProperty,
        categoryId,
        currentPage,
      });
      // –≤—Å—Ç–∞–≤–ª—è—î queryString –≤ –Ω–∞—à URL
      navigate(`?${queryString}`);
    }
    // —Ä–æ–±–∏—Ç—å—Å—è –¥–ª—è —Ç–æ–≥–æ —à–æ–± –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ —É–º–æ–≤–∞ if (isMounted.current) —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–ª–∞
    isMounted.current = true;
  }, [categoryId, sortType, currentPage, navigate]);

  //TODO –Ø–∫—à–æ –±—É–≤ –ø–µ—Ä—à–∏–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –º–∏ –ø—Ä–æ–≤—ñ—Ä—è—î–º–æ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º –≤ —Ä–µ–¥–∞–∫—Å—ñ
  useEffect(() => {
    // –Ø–∫—à–æ —î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–æ –º–∏ —ó—Ö –ø–∞—Ä—Å–∏–º–æ (—ñ –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –∑–±–µ—Ä—ñ–≥–∞—Ç–∏—Å—å –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞–∫–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫)
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1));
      // –¢–∞–∫ —è–∫ –≤ –Ω–∞—à–∏—Ö params —Å–æ—Ä—Ç –≤ –Ω–∞—Å —Å—Ç—Ä—ñ–Ω–≥–∞, –∞ –≤ —Ä–µ–¥–∞–∫—Å—ñ –≤ –Ω–∞c –æ–±'—î–∫—Ç, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–±—ñ–≥—Ç–∏—Å—å –ø–æ  –º–∞—Å–∏–≤—É –æ–±'—î–∫—Ç—ñ–≤ (sortList) —ñ –Ω–∞–π—Ç–∏ —Å–∞–º–µ —Ç–æ–π –æ–±'—î–∫—Ç –≤ —è–∫–æ–≥–æ sortProperty –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î sortProperty –≤ —Å—Ç—Ä—ñ–Ω–∑—ñ –≤ params —ñ –≤–∂–µ —Ç–æ–π –æ–±'—î–∫—Ç –º–∏ –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –≤ —Ä–µ–¥–∞–∫—Å
      const sort = sortList.find(
        (obj) => obj.sortProperty === params.sortProperty
      );
      dispatch(setFilters({ ...params, sort }));
      isSearch.current = true;
    }
  }, []);

  //TODO —è–∫—â–æ –±—É–≤ –ø–µ—Ä—à–∏–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –ø—ñ—Ü–∏
  useEffect(() => {
    // –¢—É—Ç –Ω–∞–º —Ç—Ä–µ–±–∞ –ø—Ä–æ–≤—ñ—Ä—è—Ç–∏ —á–∏ —Ç—Ä–µ–±–∞ –Ω–∞–º —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç (—Ç–æ–±—Ç–æ —è–∫—à–æ –ø—Ä–∏–π—à–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ (window.location.search) —Ç–æ —Ç–æ–¥—ñ –º–∏ –Ω–µ –±—É–¥–µ–º –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∑–∞–ø–∏—Ç, –∞ —á–µ–∫–∞—î–º–æ –∫–æ–ª–∏ –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è dispatch(setFilters))

    // –¢—É—Ç —è–∫—Ä–∞–∑ —Ä–æ–±–∏—Ç—Å—å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø—Ä–∏–π—à–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫—à–æ –Ω—î —Ç–æ –º–∏ —Ä–æ–±–∏–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –∑–∞–ø–∏—Ç
    if (!isSearch.current) {
      getPizzas();
    }
    isSearch.current = false;
    window.scrollTo(0, 0);
  }, [searchValue, categoryId, sortType, currentPage]);

  //! —Ç–∏–º—á–∞—Å–æ–≤–æ
  const pizzasData = items.map((pizza: any) => (
    <PizzaBlock key={pizza.id} {...pizza} />
  ));

  const skeletons = [...new Array(4)].map((_, index) => (
    <PizzaSkeleton key={index} />
  ));
  return (
    <div className='container'>
      <div className='content__top'>
        <Categories value={categoryId} onChangeCategory={onChangeCategory} />
        <Sort />
      </div>
      <h2 className='content__title'>–í—Å—ñ –ø—ñ—Ü–∏</h2>
      {status === 'error' ? (
        <div className='content__error-info'>
          <h2>–£–ø—Å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ üíÄ...üíÄ</h2>
          <p>
            –ù–∞ –∂–∞–ª—å –ø—ñ—Ü–∏ –Ω–µ –∑–∞—Ö–æ—Ç—ñ–ª–∏ –≤–∞–º –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ
            –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ‚Üª —Å—Ç–æ—Ä—ñ–Ω–∫—É)
          </p>
        </div>
      ) : (
        <div className='content__items'>
          {status === 'loading' ? skeletons : pizzasData}
        </div>
      )}

      <Pagination currentPage={currentPage} onChangePage={onChangePage} />
    </div>
  );
};

export default Home;
